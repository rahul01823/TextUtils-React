{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","backgroundColor","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.13aa9e36.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from \"react-router-dom\";\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/about\">\r\n               {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick = {props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n    title :PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n  \r\n        }\r\n\r\nNavbar.defaultProps = {\r\n  title : 'Set title here',\r\n  aboutText: 'About text here'\r\n\r\n}","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"Input text give \\\"\" + text+ \"\\\"\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Upper case\",\"success\");\r\n  };\r\n  const handleLoClick = () => {   \r\n    // console.log(\"Input text give \\\"\" + text+ \"\\\"\");\r\n    let newText = text.toLowerCase();\r\n    setText(newText);   \r\n    props.showAlert(\"Converted to Lower case\",\"success\");\r\n  };\r\n  \r\n  const handleClearClick = () => {\r\n    // console.log(\"Input text give \\\"\" + text+ \"\\\"\");\r\n    let newText = \" \";\r\n    setText(newText);\r\n    props.showAlert(\"Text Area Cleared\",\"success\");\r\n  };\r\n  const handleCopyClick = () => {\r\n\tvar text = document.getElementById('myBox');\r\n\ttext.select();\r\n\tnavigator.clipboard.writeText(text.value);\r\n\tprops.showAlert(\"Text copied to Clipboard\",\"success\");\r\n  };\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"Output text give \");\r\n    setText(event.target.value);\r\n  };\r\n  \r\n  const handleExtraSpaces = () =>{\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"))\r\n    props.showAlert(\"Removed Extra Spaces\",\"success\");\r\n\r\n  }\r\n\r\n\r\n  //main\r\n  const [text, setText] = useState(\"\");\r\n  // const [replace, setReplace] = useState(\"\");\r\n  // setText(\"New\")\r\n  return (\r\n    <>\r\n\t<div className=\"container\" style = {{color: props.mode==='dark'?'white':'black'}} >\r\n\t\t<h1>{props.heading}</h1>\r\n\t\t<div className=\"mb-3p\" >\r\n\t\t   <textarea  className=\"form-control\" id=\"myBox\" style = {{backgroundColor: props.mode ==='dark'?'grey':'white', color: props.mode ==='dark'?'white':'black'}}  value={text} onChange={handleOnChange} rows=\"8\"></textarea>\r\n\t\t</div>\r\n\t\t{/* <span id=\"replace\" className=\" mx-3 my-5\" value={replace}>anj</span><br/> */}\r\n\t\t<button className=\"btn btn-primary mx-1 my-3\" id = \"upper\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n\t\t<button className=\"btn btn-primary mx-3 my-3\" onClick={handleLoClick}>Convert to LowerCase</button>\r\n\t\t<button className=\"btn btn-primary mx-3 my-3\" onClick={handleClearClick}>Clear Text Area </button>\r\n\t\t<button className=\"btn btn-primary mx-3 my-3\" onClick={handleCopyClick} >  Copy Text  </button>\r\n\t\t<button className=\"btn btn-primary mx-3 my-3\" onClick={handleExtraSpaces} >  Remove Extra Spaces  </button>\r\n\t</div>\r\n\t<div className=\"container my-4\" style = {{color: props.mode==='dark'?'white':'black'}} >      \r\n\t   <h1>Your Summary</h1>\r\n\t   <p>{\" \"} {text.split(\" \").length} Words,{text.length} charcters</p>\r\n\t   <p> {0.008 * text.split(\" \").length} Minutes read</p>\r\n\t   <h3>Preview</h3>\r\n\t   <p>{text.length>0?text:\"Enter something in the Text Area to Preview\"}</p>\r\n\t </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n        const capitalize = (word)=>{\r\n                const lower = word.toLowerCase();\r\n                return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n        }\r\n        return (\r\n              \r\n                props.alert && <div className = {`alert alert-${props.alert.type} alert-dismissible`} role=\"alert\" >\r\n                         <strong> {capitalize(props.alert.type)}</strong>  : {props.alert.msg}\r\n\r\n                </div>\r\n                \r\n        )\r\n}\r\n\r\nexport default Alert\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\n// import {\n// \tBrowserRouter as Router,\n// \tSwitch,\n// \tRoute\n// } from \"react-router-dom\"\n\nfunction App() {\n\n\tconst [mode,setMode] = useState('light');\n\tconst [alert,setAlert] = useState(null);\n\tconst showAlert = (message,type)=>{\n\t\tsetAlert({\n\t\t\tmsg : message,\n\t\t\ttype : type\n\t\t})\n\t\tsetTimeout(()=>{\n\t\t\tsetAlert(null);\n\t\t},1500);\n\t}\n\n\t\n\n\tconst toggleMode = ()=>{\n\t\tif( mode === 'light'){\n\t\t\tsetMode ('dark');\n\t\t\tdocument.body.style.backgroundColor ='#4c408e';\n\t\t\tshowAlert(\"Dark mode has been enabled\",'success');\n\t\t\tdocument.title = \"TextUtils-Dark\";\n\t\t\t// setInterval(() =>{\n\t\t\t// \tdocument.title='Install TextUtils Now';\n\t\t\t// }, 2000);\n\t\t\t\n\t\t\t// setInterval(() =>{\n\t\t\t// \tdocument.title='TextUtils Is amazing';\n\t\t\t// }, 1500);\n\n\t\t}\n\t\telse{\n\t\t\tsetMode ( 'light');\n\t\t\tdocument.body.style.backgroundColor ='white';\n\t\t\tshowAlert(\"Light mode has been enabled\",'success');\n\t\t\tdocument.title = \"TextUtils-light\";\n\t\t}\n\t}\n\treturn (\n\t<>\n\t\t{/* <Router> */}\n\t\t<Navbar title = \"TextUtils\" toggleMode={toggleMode} mode = {mode}/>\n\t\t<Alert alert = {alert}/>\n\t\t<div className=\"container my-3\">\n\t\t{/* <Switch>\n\t\t\t<Route exact path=\"/about\">\n\t\t\t<About />\n\t\t\t</Route>\n\t\t<Route exact path=\"/\">*/}\n\t\t<TextForm showAlert={showAlert} heading =\"Enter the text to analyze\" mode = {mode}/>\n\t{/*\t</Route>\n\t\t\t</Route>\n\t\t</Switch> */}\n\t\t\n\t\n\t\t</div>\n\t\t{/* </Router> */}\n\n\t</>\n\t);        \n}\n\nexport default App;\t\t\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}